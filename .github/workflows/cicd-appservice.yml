name: ci-cd-appservice

on:
  #push:
  #  branches:
  #    - main
  #  paths:
  #    - 'api/**'  
  workflow_dispatch:
    

jobs:
  create_log_analytics:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./scripts
    
    steps:
      - uses: actions/checkout@v3

      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set default Azure subscription
        run: az account set -s ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: Check the resource group exists
        id: rg_exists
        run: |
          RG_EXISTS=$(az group exists --name ${{ secrets.AZURE_LOG_ANALYTICS_WRKSPC_RESOURCE_GROUP }} --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }})
          echo "::set-output name=RG_EXISTS::${RG_EXISTS}"

      - name: Create Azure resource group
        if: steps.rg_exists.outputs.RG_EXISTS == 'false'
        run: |
              az deployment sub create \
               --location ${{ secrets.AZURE_LOCATION }} \
               --template-file ./deployment-rg.bicep \
               --parameters name=${{ secrets.AZURE_LOG_ANALYTICS_WRKSPC_RESOURCE_GROUP }} location=${{ secrets.AZURE_LOCATION }}

      - name: Deploy Log Workspace
        run: |
              az deployment group create --resource-group ${{ secrets.AZURE_LOG_ANALYTICS_WRKSPC_RESOURCE_GROUP }} --template-file ./deployment-logs.bicep \
                            --parameters location=${{ secrets.AZURE_LOCATION }}  \
                                         logAnalyticsWorkspaceName=${{ secrets.AZURE_LOG_ANALYTICS_WRKSPC_NAME }}
  
  cleanup_if_requested:
    runs-on: ubuntu-latest
    
    steps:
      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set default Azure subscription
        run: az account set -s ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Check the resource group exists
        id: rg_exists
        run: |
          RG_EXISTS=$(az group exists --name ${{ secrets.AZURE_RESOURCE_GROUP }} --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }})
          echo "::set-output name=RG_EXISTS::${RG_EXISTS}"

      - name: Remove deployed resource group (if exists)
        if: steps.rg_exists.outputs.RG_EXISTS == 'true'
        run: |
          echo "${{ steps.rg_exists.outputs.RG_EXISTS }}"
          az group delete --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} --yes
      
  build_deploy_infra:
    needs: [cleanup_if_requested, create_log_analytics]
    
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./scripts
    steps:
      - uses: actions/checkout@v3

      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set default Azure subscription
        run: az account set -s ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: Init connection variables
        id: connection_vars
        run: |
              dbAdminName="a`openssl rand -hex 12`"
              dbAdminPassword=`openssl rand -hex 22`
              dbUserName="u`openssl rand -hex 12`"
              dbUserPassword=`openssl rand -hex 22`
              #get public ip fromm outside
              clientIP=`dig +short myip.opendns.com @resolver1.opendns.com.`
              
              dbConnectionString="host=${{ secrets.AZURE_DB_SERVER_NAME }}.postgres.database.azure.com port=5432 dbname=${{ secrets.AZURE_DB_NAME }} user=$dbAdminName password=$dbAdminPassword sslmode=require"
              
              echo "::set-output name=DB_ADMIN_NAME::$dbAdminName"
              echo "::set-output name=DB_ADMIN_PASSWORD::$dbAdminPassword"
              echo "::set-output name=DB_USER_NAME::$dbUserName"
              echo "::set-output name=DB_USER_PASSWORD::$dbUserPassword"
              echo "::set-output name=CLIENT_IP::$clientIP"
              echo "::set-output name=DB_CONNECTION_STRING::$dbConnectionString"
    
      - name: Create Azure resource group
        run: |
              az deployment sub create \
               --location ${{ secrets.AZURE_LOCATION }} \
               --template-file ./deployment-rg.bicep \
               --parameters name=${{ secrets.AZURE_RESOURCE_GROUP }} location=${{ secrets.AZURE_LOCATION }}

      - name: Deploy Azure resources
        run: |
              az deployment group create --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --template-file ./deployment.bicep \
                            --parameters location=${{ secrets.AZURE_LOCATION }}  \
                                         logAnalyticsWorkspaceName=${{ secrets.AZURE_LOG_ANALYTICS_WRKSPC_NAME }}  \
                                         logAnalyticsWorkspaceRG=${{ secrets.AZURE_LOG_ANALYTICS_WRKSPC_RESOURCE_GROUP }}  \
                                         appInsightsName=${{ secrets.AZURE_APP_INSIGHTS_NAME }}  \
                                         dbServerName=${{ secrets.AZURE_DB_SERVER_NAME }} \
                                         dbName=${{ secrets.AZURE_DB_NAME }} \
                                         dbAdminName=${{ steps.connection_vars.outputs.DB_ADMIN_NAME }} \
                                         dbAdminPassword=${{ steps.connection_vars.outputs.DB_ADMIN_PASSWORD }} \
                                         dbUserName=${{ steps.connection_vars.outputs.DB_USER_NAME }} \
                                         dbUserPassword=${{ steps.connection_vars.outputs.DB_USER_PASSWORD }} \
                                         apiServiceName=${{ secrets.AZURE_API_SERVICE_NAME }} \
                                         apiServicePort=${{ secrets.AZURE_API_SERVICE_PORT }} \
                                         webServiceName=${{ secrets.AZURE_WEB_SERVICE_NAME }} \
                                         webServicePort=${{ secrets.AZURE_WEB_SERVICE_PORT }} \
                                         clientIPAddress=${{ steps.connection_vars.outputs.CLIENT_IP }}
      #- name: Debug
      #  run: echo "${{ steps.connection_vars.outputs.DB_CONNECTION_STRING }}" > secrets.txt
      
      #- name: Setup tmate session
      #  uses: mxschmitt/action-tmate@v3.11

      - name: Sleep 240 sec to avoid deployment issues on a minimal app service plan
        run: |
          sleep 240s
      
      - name: Initialize database
        run: |
              psql "${{ steps.connection_vars.outputs.DB_CONNECTION_STRING }}" --file=./db.sql
              
              dbUserExists=`psql "${{ steps.connection_vars.outputs.DB_CONNECTION_STRING }}" -tAc "SELECT 1 FROM pg_roles WHERE rolname='${{ steps.connection_vars.outputs.DB_USER_NAME }}'"`
               
              if [[ $dbUserExists -ne '1' ]]; then
                 psql "${{ steps.connection_vars.outputs.DB_CONNECTION_STRING }}" -tAc "CREATE USER ${{ steps.connection_vars.outputs.DB_USER_NAME }} WITH PASSWORD '${{ steps.connection_vars.outputs.DB_USER_PASSWORD }}';"
                 psql "${{ steps.connection_vars.outputs.DB_CONNECTION_STRING }}" -tAc "GRANT CONNECT ON DATABASE ${{ secrets.AZURE_DB_NAME }} TO ${{ steps.connection_vars.outputs.DB_USER_NAME }};"
                 psql "${{ steps.connection_vars.outputs.DB_CONNECTION_STRING }}" -tAc "GRANT USAGE ON SCHEMA public TO ${{ steps.connection_vars.outputs.DB_USER_NAME }};"
                 psql "${{ steps.connection_vars.outputs.DB_CONNECTION_STRING }}" -tAc "GRANT SELECT ON todo TO ${{ steps.connection_vars.outputs.DB_USER_NAME }};"
              fi
  
  build_api:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./api
    outputs:
      RELEASE_VERSION: ${{ steps.version.outputs.RELEASE_VERSION }}
      RELEASE_NAME: ${{ steps.version.outputs.RELEASE_NAME }}
      RELEASE_FILE_NAME: ${{ steps.version.outputs.RELEASE_FILE_NAME }}
      
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven
      
      - name: Build the .jar
        run: |
          ./mvnw clean package -DskipTests
      
      - name: Figure out the version info
        id: version
        run: |
          cd ./target
          files=(api*.jar)
          mv "$files" "./api-${GITHUB_SHA}.jar"
          ls -la
          cd ..
          echo "::set-output name=RELEASE_VERSION::${GITHUB_SHA}"
          echo "::set-output name=RELEASE_NAME::api-${GITHUB_SHA}"
          echo "::set-output name=RELEASE_FILE_NAME::api-${GITHUB_SHA}.jar"
          
      - name: Display next version
        run: |
          echo "Version: ${{ steps.version.outputs.RELEASE_VERSION }}"
          echo "Release name: ${{ steps.version.outputs.RELEASE_NAME }}"
          echo "Release file name: ${{ steps.version.outputs.RELEASE_FILE_NAME }}"
      
      - name: 'Upload build artifact'
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.version.outputs.RELEASE_NAME }}
          path: ./api/target/${{ steps.version.outputs.RELEASE_FILE_NAME }}
          if-no-files-found: error
          retention-days: 1
  
  deploy_api:
    needs: [build_api, build_deploy_infra]
    runs-on: ubuntu-latest
    steps:
      - name: Download build artefacts
        uses: actions/download-artifact@v2
        with:
          name: ${{needs.build_api.outputs.RELEASE_NAME}}
      - name: Check downloaded files
        run: |
          pwd
          ls -la
          ls -la ./${{ needs.build_api.outputs.RELEASE_FILE_NAME }}
      
      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
        #see https://docs.microsoft.com/en-us/azure/developer/github/connect-from-azure?tabs=azure-cli%2Clinux
        #    az account list-locations -o table

      - name: Set default Azure subscription
        run: az account set -s ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: Deploy to AppService
        uses: azure/webapps-deploy@v2
        with: 
          app-name: "${{ secrets.AZURE_API_SERVICE_NAME }}"
          package: ./${{ needs.build_api.outputs.RELEASE_FILE_NAME }}
      
      - name: Run integration test(s)
        run: |
          echo "Run integration tests...."
          
  build_web:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./web
    outputs:
      RELEASE_VERSION: ${{ steps.version.outputs.RELEASE_VERSION }}
      RELEASE_NAME: ${{ steps.version.outputs.RELEASE_NAME }}
      RELEASE_FILE_NAME: ${{ steps.version.outputs.RELEASE_FILE_NAME }}
      
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven
      
      - name: Build the .jar
        run: |
          ./mvnw clean package -DskipTests
      
      - name: Figure out the version info
        id: version
        run: |
          cd ./target
          files=(web*.jar)
          mv "$files" "./web-${GITHUB_SHA}.jar"
          ls -la
          cd ..
          echo "::set-output name=RELEASE_VERSION::${GITHUB_SHA}"
          echo "::set-output name=RELEASE_NAME::web-${GITHUB_SHA}"
          echo "::set-output name=RELEASE_FILE_NAME::web-${GITHUB_SHA}.jar"
          
      - name: Display next version
        run: |
          echo "Version: ${{ steps.version.outputs.RELEASE_VERSION }}"
          echo "Release name: ${{ steps.version.outputs.RELEASE_NAME }}"
          echo "Release file name: ${{ steps.version.outputs.RELEASE_FILE_NAME }}"
      
      - name: 'Upload build artifact'
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.version.outputs.RELEASE_NAME }}
          path: ./web/target/${{ steps.version.outputs.RELEASE_FILE_NAME }}
          if-no-files-found: error
          retention-days: 1
          
  deploy_web:
    needs: [build_deploy_infra, build_web, deploy_api]
    runs-on: ubuntu-latest
    steps:
      - name: Download build artefacts
        uses: actions/download-artifact@v2
        with:
          name: ${{needs.build_web.outputs.RELEASE_NAME}}
      - name: Check downloaded files
        run: |
          pwd
          ls -la
          ls -la ./${{ needs.build_web.outputs.RELEASE_FILE_NAME }}
      
      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
        #see https://docs.microsoft.com/en-us/azure/developer/github/connect-from-azure?tabs=azure-cli%2Clinux
        #    az account list-locations -o table

      - name: Set default Azure subscription
        run: az account set -s ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: Deploy to AppService
        uses: azure/webapps-deploy@v2
        with: 
          app-name: "${{ secrets.AZURE_WEB_SERVICE_NAME }}"
          package: ./${{ needs.build_web.outputs.RELEASE_FILE_NAME }}
      
      - name: Run integration test(s)
        run: |
          echo "Run integration tests...."
  