name: ci-cd-appservice

on:
  #push:
  #  branches:
  #    - main
  #  paths:
  #    - 'api/**'  
  workflow_dispatch:
    

jobs:
  cleanup:
    runs-on: ubuntu-latest
    
    steps:
      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set default Azure subscription
        run: az account set -s ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: Check the resource group exists
        id: rg_exists
        run: |
          RG_EXISTS=$(az group exists --name ${{ secrets.AZURE_RESOURCE_GROUP }} --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }})
          if [[ -z $RG_EXISTS ]]; then
            echo "RG does NOT exist"
            echo '::set-output name=RG_EXISTS::false'
          elif [[ $RG_EXISTS == "true" ]]; then
            echo "RG does exist"
            echo '::set-output name=RG_EXISTS::true'
          else
            echo "RG does NOT exist"
            echo '::set-output name=RG_EXISTS::false'
          fi
      - name: Remove deployed resource group (if exists)
        if: steps.rg_exists.outputs.RG_EXISTS == 'true'
        run: |
          echo "${{ steps.rg_exists.outputs.RG_EXISTS }}"
          az group delete --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} --yes
      
  build_deploy_infra:
    needs: [cleanup]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./scripts
    steps:
      - uses: actions/checkout@v3

      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set default Azure subscription
        run: az account set -s ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: Test
        run: |
              dbConnectionString="host=${{ secrets.AZURE_DB_NAME }}.postgres.database.azure.com port=5432 dbname=${{ secrets.AZURE_DB_NAME }} user=$adminName password=$adminPassword sslmode=require"
               
              printf "$dbConnectionString" >> secrets.txt
      
      - name: Init variables
        id: vars
        run: |
              dbAdminName="a`openssl rand -hex 12`"
              dbAdminPassword=`openssl rand -base64 22`
              dbUserName="u`openssl rand -hex 12`"
              dbUserPassword=`openssl rand -base64 22`
              #get public ip fromm outside
              clientIP=`dig +short myip.opendns.com @resolver1.opendns.com.`
              
              dbConnectionString="host=${{ secrets.AZURE_DB_NAME }}.postgres.database.azure.com port=5432 dbname=${{ secrets.AZURE_DB_NAME }} user=$adminName password=$adminPassword sslmode=require"
              
              echo '::set-output name=DB_ADMIN_NAME::${dbAdminName}'
              echo '::set-output name=DB_ADMIN_PASSWORD::${dbAdminPassword}'
              
              echo '::set-output name=DB_USER_NAME::${dbUserName}'
              echo '::set-output name=DB_USER_PASSWORD::${dbUserPassword}'
              
              echo '::set-output name=CLIENT_IP::${clientIP}'
              
              echo '::set-output name=DB_CONNECTION_STRING::${dbConnectionString}'
              
              echo "$dbConnectionString" > ./secrets.txt
              
      - name: Run tmate
        uses: mxschmitt/action-tmate@v2
        
      - name: Create Azure resource group
        run: |
              az deployment sub create \
               --location ${{ secrets.AZURE_LOCATION }} \
               --template-file ./deployment-rg.bicep \
               --parameters name=${{ secrets.AZURE_RESOURCE_GROUP }} location=${{ secrets.AZURE_LOCATION }}

      - name: Deploy Azure resources
        run: |
              az deployment group create --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --template-file ./deployment.bicep \
                            --parameters location=${{ secrets.AZURE_LOCATION }}  \
                                         dbServerName=${{ secrets.AZURE_DB_SERVER_NAME }} \
                                         dbName=${{ secrets.AZURE_DB_NAME }} \
                                         dbAdminName=${{ steps.vars.outputs.DB_ADMIN_NAME }} \
                                         dbAdminPassword=${{ steps.vars.outputs.DB_ADMIN_PASSWORD }} \
                                         dbUserName=${{ steps.vars.outputs.DB_USER_NAME }} \
                                         dbUserPassword=${{ steps.vars.outputs.DB_USER_PASSWORD }} \
                                         apiServiceName=${{ secrets.AZURE_API_SERVICE_NAME }} \
                                         apiServicePort=${{ secrets.AZURE_API_SERVICE_PORT }} \
                                         webServiceName=${{ secrets.AZURE_WEB_SERVICE_NAME }} \
                                         webServicePort=${{ secrets.AZURE_WEB_SERVICE_PORT }} \
                                         clientIPAddress=${{ steps.vars.outputs.CLIENT_IP }}
      - name: Initialize database
        run: |               
              dbUserExists=`psql "${{ steps.vars.outputs.DB_CONNECTION_STRING }}" -tAc "SELECT 1 FROM pg_roles WHERE rolname='$dbUserName'"`
               
              if [ $dbUserExists -ne '1' ]
               then
                 psql "${{ steps.vars.outputs.DB_CONNECTION_STRING }}" -tAc "SELECT 1 FROM pg_roles WHERE rolname='$dbUserName'"
                 psql "${{ steps.vars.outputs.DB_CONNECTION_STRING }}" -tAc "CREATE USER $dbUserName WITH PASSWORD '$dbUserPassword';"
                 psql "${{ steps.vars.outputs.DB_CONNECTION_STRING }}" -tAc "GRANT CONNECT ON DATABASE $dbName TO $dbUserName;"
                 psql "${{ steps.vars.outputs.DB_CONNECTION_STRING }}" -tAc "GRANT USAGE ON SCHEMA public TO $dbUserName;"
                 psql "${{ steps.vars.outputs.DB_CONNECTION_STRING }}" -tAc "GRANT SELECT ON todo TO $dbUserName;"
               endif

               psql "${{ steps.vars.outputs.DB_CONNECTION_STRING }}" --file=./db.sql
  build_api:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./api
    outputs:
      RELEASE_VERSION: ${{ steps.version.outputs.RELEASE_VERSION }}
      RELEASE_NAME: ${{ steps.version.outputs.RELEASE_NAME }}
      RELEASE_FILE_NAME: ${{ steps.version.outputs.RELEASE_FILE_NAME }}
      
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven
      
      - name: Build the .jar
        run: |
          ./mvnw clean package -DskipTests
      
      - name: Figure out the version info
        id: version
        run: |
          cd ./target
          files=(api*.jar)
          mv "$files" "./api-${GITHUB_SHA}.jar"
          ls -la
          cd ..
          echo "::set-output name=RELEASE_VERSION::${GITHUB_SHA}"
          echo "::set-output name=RELEASE_NAME::api-${GITHUB_SHA}"
          echo "::set-output name=RELEASE_FILE_NAME::api-${GITHUB_SHA}.jar"
          
      - name: Display next version
        run: |
          echo "Version: ${{ steps.version.outputs.RELEASE_VERSION }}"
          echo "Release name: ${{ steps.version.outputs.RELEASE_NAME }}"
          echo "Release file name: ${{ steps.version.outputs.RELEASE_FILE_NAME }}"
      
      - name: 'Upload build artifact'
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.version.outputs.RELEASE_NAME }}
          path: ./api/target/${{ steps.version.outputs.RELEASE_FILE_NAME }}
          retention-days: 5
  
  deploy_api:
    needs: [build_api, build_deploy_infra]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./api
    steps:
      - uses: actions/checkout@v3

  build_web:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./web
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven
          
  deploy_web:
    needs: [build_web, build_deploy_infra]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./web
    steps:
      - uses: actions/checkout@v3
  
